# CSE183 Assignment 8 Backend
#

openapi: '3.0.3'

info:
  description: CSE183 Assignment 8 Backend
  version: 0.1.0
  title: CSE183 Assignment 8 Backend

servers:
  - url: http://localhost:3010/v0

paths:
  /authenticate:
    post:
      description: check login values
      requestBody:
        description: login values
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputLogin'
      responses:
        200:
          description: Sucessfully Logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccess'
        401:
          description: Email or password incorrect
  /listings:
    get:
      description: Gets all listings
      security: []
      parameters:
      - name: search
        in: query
        description: Query search
        required: false
        schema:
          type: string
      - name: id
        in: query
        description: Listing ID
        required: false
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Got all listings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listings'
    post:
      description: Post a listing
      security:
        - bearerAuth: []
      requestBody:
        description: listing to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewListing'
      responses:
        201:
          description: Posted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listings'
        400:
          description: invalid parameter
        404:
          description: Member does not exist


  /listings/category:
    get:
      description: Gets all categories
      security: []
      parameters:
      - name: sub
        in: query
        description: Finds subs of category
        required: false
        schema:
          type: string
      - name: fil
        in: query
        description: Finds filters of category
        required: false
        schema:
          type: string
      responses:
        200:
          description: Got all categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categories'
  /listings/{category}:
    get:
      description: Gets listings from category
      security: []
      parameters:
      - name: category
        in: path
        description: Name of category
        required: true
        schema:
          type: string
      - name: sub
        in: query
        description: Name of a subcategory
        required: false
        schema:
          type: string
      - name: fil
        in: query
        description: Name of filter
        required: false
        schema:
          type: string
      responses:
        200:
          description: Listings Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listings'
     
        404:
          description: Listings not found
  /member:
    get:
      description: Gets users
      security: []
      parameters:
      - name: user
        in: query
        description: specific user
        schema:
          type: string
      - name: id
        in: query
        description: user id
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: got users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Members'
        404:
          description: Users not found
    post:
      description: add user to database
      requestBody:
        description: inputted user data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserResponse'
      responses:
        201:
          description: Successfully added user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Members'
        400:
          description: Unexpected Values

components:
  schemas:
    Categories:
      properties:
        parent:
          type: string
        name:
          type: string
        id:
          type: string
          format: uuid
      required:
        - parent
        - name
        - id
    NewListing:
      properties:
        category:
          type: string
        filter:
          type: string
        listing:
          type: object
          properties:
            title:
              type: string
            content:
              type: string
            summary:
              type: string
            price:
              type: string
            images:
              type: array
              items:
                type: object
                properties:
                  link:
                    type: string
                required:
                - link
          required:
            - title
            - content
            - images
      required:
        - filter
        - listing              

    Listings:
      properties:
        id:
          type: string
          format: uuid
        categoryID:
          type: string
          format: uuid
        memberID:
          type: string
          format: uuid
        listings:
          type: object  
      required:
        - id
        - categoryID
        - memberID
        - listings
    Members:
      properties:
        id:
          type: string
          format: uuid
        member:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            password:
              type: string
          required:
            - name
            - email
            - password
      required:
        - id
        - member
    InputLogin:
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    LoginSuccess:
      properties:
        email:
          type: string
        accessToken:
          type: string
    UserResponse:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - name
        - email
        - password
      additionalProperties: false

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT